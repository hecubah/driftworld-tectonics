#pragma kernel CSTrianglePlateContacts
#pragma kernel CSSubductionUplift
#pragma kernel CSErosionDampingSediments
#pragma kernel CSPlateVerticesSlabContributions
#pragma kernel CSContinentalContacts
#pragma kernel CSContinentalCollisionUplift

#pragma warning( disable : 3557 ) // loop unroll
#define MAX_DISTANCE 500
#define MAX_BVS_SEARCHED 512
#define MAX_DFS_STACK_SIZE 40
#define INTERSECT_TOLERANCE 0.0001f //0.00005f

struct s_BV {
    int n_children;
    int left_child;
    int right_child;
    int triangle_index;
    float3 circumcenter;
    float circumradius;
};

struct s_triangle {
    int a;
    int b;
    int c;
    int neigh_1;
    int neigh_2;
    int neigh_3;
    float3 circumcenter;
    float circumradius;
};

struct vertex_data {
    float elevation;
    int plate;
    int orogeny;
    float age;
};

struct s_platecontact // size of 28 B
{
    int contact_occured;
    float3 contact_point;
    float elevation;
    int contacting_plate;
    int contacted_plate;
};

int n_crust_triangles;
int n_plates;
int n_crust_border_triangles;
int n_crust_vertices;

StructuredBuffer<float3> crust_vertex_locations;
StructuredBuffer<s_triangle> crust_triangles; // triangle vertex vectors
StructuredBuffer<vertex_data> crust_vertex_data; // triangle vertex vectors
StructuredBuffer<int> crust_triangle_plates; // triangle plate indices
StructuredBuffer<int> overlap_matrix; // plates' overlaps
StructuredBuffer<s_BV> crust_BVH; // BV hiearchy of all respective plate triangles
StructuredBuffer<int> crust_BVH_sps; // prefix sum of BV hiearchy sizes
StructuredBuffer<float4> plate_transforms; // quaternion array of geometry rotations
StructuredBuffer<int> crust_border_triangles;
StructuredBuffer<float3> crust_border_triangle_circumcenters;
StructuredBuffer<float> crust_border_triangle_circumradii;
StructuredBuffer<int> crust_border_triangles_sps;

RWStructuredBuffer<s_platecontact> contact_points; // array of border triangle contact results (collision positions defining the collision front)


float4 qmul(float4 q1, float4 q2) {
    return float4(
        q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
        q1.w * q2.w - dot(q1.xyz, q2.xyz)
        );
}

float3 quat_rot(float3 v, float4 r) {
    float4 r_c = r * float4(-1, -1, -1, 1);
    return qmul(r, qmul(float4(v, 0), r_c)).xyz;
}


bool is_point_in_crust_tri_transformed(float3 searchedpoint, float3 a, float3 b, float3 c) {
    float3 abcross, bccross, cacross, triangle_barycenter;
    float abplane_test, bcplane_test, caplane_test;
    abcross = cross(a, b);
    bccross = cross(b, c);
    cacross = cross(c, a);
    triangle_barycenter = normalize(a + b + c);
    abplane_test = dot(abcross, searchedpoint);
    bcplane_test = dot(bccross, searchedpoint);
    caplane_test = dot(cacross, searchedpoint);
    return ((abplane_test + INTERSECT_TOLERANCE >= 0) && (bcplane_test + INTERSECT_TOLERANCE >= 0) && (caplane_test + INTERSECT_TOLERANCE >= 0));
}

bool segments_intersect(float3 a1, float3 a2, float3 b1, float3 b2) {

    float3 intersection = cross(cross(a1, a2), cross(b1, b2));
    if (length(intersection) > 0) {
        intersection = normalize(intersection);
    }
    else {
        return true;
    }
    if (dot(a1, -intersection) > dot(a1, intersection)) {
        intersection = -intersection;
    }
    if (dot(a1, intersection) >= dot(a1, a2) && dot(a2, intersection) >= dot(a1, a2) && dot(b1, intersection) >= dot(b1, b2) && dot(b2, intersection) >= dot(b1, b2)) {
        return true;
    }
    else {
        return false;
    }


}

bool crust_triangles_intersect(int triangle_a, int triangle_b, int plate_index_a, int plate_index_b) {
    float3 a1, a2, a3, b1, b2, b3;
    float4 transform_a, transform_b;
    transform_a = plate_transforms[plate_index_a];
    transform_b = plate_transforms[plate_index_b];
    a1 = quat_rot(crust_vertex_locations[crust_triangles[triangle_a].a], transform_a);
    a2 = quat_rot(crust_vertex_locations[crust_triangles[triangle_a].b], transform_a);
    a3 = quat_rot(crust_vertex_locations[crust_triangles[triangle_a].c], transform_a);
    b1 = quat_rot(crust_vertex_locations[crust_triangles[triangle_b].a], transform_b);
    b2 = quat_rot(crust_vertex_locations[crust_triangles[triangle_b].b], transform_b);
    b3 = quat_rot(crust_vertex_locations[crust_triangles[triangle_b].c], transform_b);

    if (is_point_in_crust_tri_transformed(b1, a1, a2, a3) || is_point_in_crust_tri_transformed(b2, a1, a2, a3) || is_point_in_crust_tri_transformed(b3, a1, a2, a3) || is_point_in_crust_tri_transformed(a1, b1, b2, b3) || is_point_in_crust_tri_transformed(a2, b1, b2, b3) || is_point_in_crust_tri_transformed(a3, b1, b2, b3)) {
        return true;
    }
    if (segments_intersect(a1, a2, b1, b2)) {
        return true;
    }
    if (segments_intersect(a1, a2, b2, b3)) {
        return true;
    }
    if (segments_intersect(a1, a2, b3, b1)) {
        return true;
    }
    if (segments_intersect(a2, a3, b1, b2)) {
        return true;
    }
    if (segments_intersect(a2, a3, b2, b3)) {
        return true;
    }
    if (segments_intersect(a2, a3, b3, b1)) {
        return true;
    }
    if (segments_intersect(a3, a1, b1, b2)) {
        return true;
    }
    if (segments_intersect(a3, a1, b2, b3)) {
        return true;
    }
    if (segments_intersect(a3, a1, b3, b1)) {
        return true;
    }
    return false;
}


s_platecontact triangle_contact_with_plate_bvh(int triangle_index, int triangle_plate_index, int bv_plate_index) {

    s_platecontact retval;

    retval.contact_occured = 0;
    retval.contact_point = float3(0, 0, 0);
    retval.elevation = 0;
    retval.contacting_plate = triangle_plate_index;
    retval.contacted_plate = bv_plate_index;
    int candidate_triangle_index = -1;
    int dfs_stack[MAX_DFS_STACK_SIZE];
    int stack_index = 0;

    dfs_stack[stack_index] = 0;

    float3 needle_circumcenter = crust_triangles[triangle_index].circumcenter;
    float needle_circumradius = crust_triangles[triangle_index].circumradius;
    float3 needle_circumcenter_tr = quat_rot(needle_circumcenter, plate_transforms[triangle_plate_index]);
    int offset = crust_BVH_sps[bv_plate_index];

    s_triangle candidate, candidate_neighbour; // maybe delete

    float dot_prod, dist, barycenter_dot_product, barycenter_dot_max;

    bool nearest_barycenter_found, plate_check;

    while (stack_index >= 0) {
        dot_prod = dot(needle_circumcenter_tr, quat_rot(crust_BVH[offset + dfs_stack[stack_index]].circumcenter, plate_transforms[bv_plate_index]));

        dist = (dot_prod < 1 ? acos(dot_prod) : 0.0f);


        if (dist > (needle_circumradius + crust_BVH[offset + dfs_stack[stack_index]].circumradius) * 1.01f) {
            while ((stack_index > 0) && (crust_BVH[offset + dfs_stack[stack_index - 1]].left_child != dfs_stack[stack_index])) {
                stack_index--;
            }
            if (stack_index == 0) {
                return retval;
            }
            dfs_stack[stack_index] = crust_BVH[offset + dfs_stack[stack_index - 1]].right_child;
            continue;
        }

        if (crust_BVH[offset + dfs_stack[stack_index]].n_children == 2) {
            dfs_stack[stack_index + 1] = crust_BVH[offset + dfs_stack[stack_index]].left_child;
            stack_index++;
        }
        else {
            // triangle test START
            if (crust_BVH[offset + dfs_stack[stack_index]].triangle_index != -1) {
                if (crust_triangles_intersect(triangle_index, crust_BVH[offset + dfs_stack[stack_index]].triangle_index, triangle_plate_index, bv_plate_index)) {
                    retval.contact_occured = 1;
                    retval.contact_point = normalize(crust_vertex_locations[crust_triangles[triangle_index].a] + crust_vertex_locations[crust_triangles[triangle_index].b] + crust_vertex_locations[crust_triangles[triangle_index].c]);
                    //retval.elevation = (crust_vertex_data[crust_triangles[triangle_index].a].elevation + crust_vertex_data[crust_triangles[triangle_index].b].elevation + crust_vertex_data[crust_triangles[triangle_index].c].elevation) / 3.0f;
                    retval.elevation = (crust_vertex_data[crust_triangles[crust_BVH[offset + dfs_stack[stack_index]].triangle_index].a].elevation + crust_vertex_data[crust_triangles[crust_BVH[offset + dfs_stack[stack_index]].triangle_index].b].elevation + crust_vertex_data[crust_triangles[crust_BVH[offset + dfs_stack[stack_index]].triangle_index].c].elevation) / 3.0f;
                    /*
                    int contacting_plate = ;
                    int contacted_plate;
                    */
                    return retval;
                }
            }
            // triangle test END
            while ((stack_index > 0) && (crust_BVH[offset + dfs_stack[stack_index - 1]].left_child != dfs_stack[stack_index]))
            {
                stack_index--;
            }
            if (stack_index == 0) {
                return retval;
            }
            dfs_stack[stack_index] = crust_BVH[offset + dfs_stack[stack_index - 1]].right_child;
        }
    }
    return retval;

}

[numthreads(64,1,1)]
void CSTrianglePlateContacts(uint3 dID : SV_DispatchThreadID)
{
    int ivi = dID.x; // interpolated triangle index
    if (ivi >= n_crust_border_triangles) {
        return;
    }
    int main_plate_index = 0;
    while (ivi >= crust_border_triangles_sps[main_plate_index+1]) {
        main_plate_index++;
    }

    for (int i = 0; i < n_plates; i++) {
        if (i == main_plate_index) {
            continue;
        }
        contact_points[i * n_crust_border_triangles + ivi] = triangle_contact_with_plate_bvh(crust_border_triangles[ivi], main_plate_index, i);
    }

}



float subduction_control_distance;
float subduction_max_distance;
float oceanic_trench_elevation;
float highest_continental_altitude;
float maximum_plate_speed;
float subduction_uplift;

StructuredBuffer<float3> plate_motion_axes;
StructuredBuffer<float> plate_motion_angular_speeds;
RWStructuredBuffer<float> uplift;

float subduction_distance_transfer(float distance) {
    if (distance > subduction_max_distance) {
        return 0;
    }
    float normal = (pow(subduction_max_distance, 3) - pow(subduction_control_distance, 3)) / 6.0f + (pow(subduction_control_distance, 2) * subduction_max_distance - pow(subduction_max_distance, 2) * subduction_control_distance) * 0.5f;
    float value = pow(distance, 3) / 3.0f - (subduction_control_distance + subduction_max_distance) * pow(distance, 2) * 0.5f + subduction_control_distance * subduction_max_distance * distance + pow(subduction_max_distance, 3) / 6.0f - pow(subduction_max_distance, 2) * subduction_control_distance * 0.5f;
    return value / normal;
}
float subduction_speed_transfer(float3 location, int plate1, int plate2) {
    return length(cross(plate_motion_angular_speeds[plate1] * plate_motion_axes[plate1] - plate_motion_angular_speeds[plate2] * plate_motion_axes[plate2], location)) / maximum_plate_speed;
}

float subduction_height_transfer(float source_elevation) {
    return pow((source_elevation - oceanic_trench_elevation) / (highest_continental_altitude - oceanic_trench_elevation), 2);
}

[numthreads(64, 1, 1)]
void CSSubductionUplift(uint3 dID : SV_DispatchThreadID)
{

    int ivi = dID.x;
    if (ivi >= n_crust_vertices) {
        return;
    }
    float uplift_sum = 0.0f;
    int ivi_plate = crust_vertex_data[ivi].plate;
    float3 iv = quat_rot(crust_vertex_locations[ivi], plate_transforms[ivi_plate]);


    for (int i = 0; i < n_plates; i++) {
        if (overlap_matrix[ivi_plate * n_plates + i] < 1) {
            continue;
        }
        float dist = MAX_DISTANCE;


        int found_contact_index = -1;
        int cpi; // contact point index
        float dot_prod;
        float current_dist;

        for (int j = 0; j < n_crust_border_triangles; j++) {
            cpi = i * n_crust_border_triangles + j;
            if ((contact_points[cpi].contact_occured != 0) && (contact_points[cpi].contacting_plate == ivi_plate) && (contact_points[cpi].contacted_plate == i)) {
                dot_prod = dot(quat_rot(contact_points[cpi].contact_point, plate_transforms[ivi_plate]), iv);
                current_dist = (dot_prod < 1 ? acos(dot_prod) : 0);
                if (current_dist < dist) {
                    dist = current_dist;
                    found_contact_index = j;
                }
            }
        }
        if (found_contact_index != -1) {
            if (dist < subduction_max_distance) {
                uplift_sum += subduction_distance_transfer(dist) * subduction_speed_transfer(iv, ivi_plate, i) * subduction_height_transfer(contact_points[i * n_crust_border_triangles + found_contact_index].elevation);
                //uplift_sum += subduction_distance_transfer(dist) * subduction_speed_transfer(iv, ivi_plate, i); // WIP
            }
        }
    }
    uplift[ivi] = uplift_sum * subduction_uplift;

}

float oceanic_elevation_damping;
float continental_erosion;
float sediment_accretion;
float average_oceanic_depth;

RWStructuredBuffer<float> erosion_damping;
RWStructuredBuffer<float> sediment;


[numthreads(64, 1, 1)]
void CSErosionDampingSediments(uint3 dID : SV_DispatchThreadID)
{
    int ivi = dID.x;
    if (ivi >= n_crust_vertices) {
        return;
    }
    if (crust_vertex_data[ivi].elevation >= 0) { // continental
        erosion_damping[ivi] = -crust_vertex_data[ivi].elevation / highest_continental_altitude * continental_erosion;
        sediment[ivi] = 0.0f;
    }
    else {
        erosion_damping[ivi] = -(1 - crust_vertex_data[ivi].elevation / oceanic_trench_elevation) * oceanic_elevation_damping;
        sediment[ivi] = (crust_vertex_data[ivi].elevation < average_oceanic_depth ? sediment_accretion : 0.0f);
    }
}

RWStructuredBuffer<int> pull_contributions;

int search_plate_bvh_for_point(int vertex_index, int index_bv_plate) // no barycenter or neighbour zeroing in!
{
    int candidate_triangle_index = -1;
    int dfs_stack[MAX_DFS_STACK_SIZE];
    int stack_index = 0;

    dfs_stack[stack_index] = 0;

    struct vertex_data{
    float elevation;
    int plate;
    };
    float3 vl = quat_rot(crust_vertex_locations[vertex_index], plate_transforms[crust_vertex_data[vertex_index].plate]);
    int offset = crust_BVH_sps[index_bv_plate];

    s_triangle candidate, candidate_neighbour; // maybe delete

    float dot_prod, dist, barycenter_dot_product, barycenter_dot_max;

    bool nearest_barycenter_found, plate_check;

    while (stack_index >= 0) {
        float3 searched_cc = quat_rot(crust_BVH[offset + dfs_stack[stack_index]].circumcenter, plate_transforms[index_bv_plate]);
        dot_prod = dot(vl, searched_cc);

        dist = (dot_prod < 1 ? acos(dot_prod) : 0.0f);

        if (dist > crust_BVH[offset + dfs_stack[stack_index]].circumradius * 1.01f) {
            while ((stack_index > 0) && (crust_BVH[offset + dfs_stack[stack_index - 1]].left_child != dfs_stack[stack_index])) {
                stack_index--;
            }
            if (stack_index == 0) {
                return -1;
            }
            dfs_stack[stack_index] = crust_BVH[offset + dfs_stack[stack_index - 1]].right_child;
            continue;
        }
        if (crust_BVH[offset + dfs_stack[stack_index]].n_children == 2) {
            dfs_stack[stack_index + 1] = crust_BVH[offset + dfs_stack[stack_index]].left_child;
            stack_index++;
        }
        else {
            // triangle test START
            if (crust_BVH[offset + dfs_stack[stack_index]].triangle_index != -1) {
                candidate_triangle_index = crust_BVH[offset + dfs_stack[stack_index]].triangle_index;
                float3 t_a, t_b, t_c;
                t_a = quat_rot(crust_vertex_locations[crust_triangles[crust_BVH[offset + dfs_stack[stack_index]].triangle_index].a], plate_transforms[index_bv_plate]);
                t_b = quat_rot(crust_vertex_locations[crust_triangles[crust_BVH[offset + dfs_stack[stack_index]].triangle_index].b], plate_transforms[index_bv_plate]);
                t_c = quat_rot(crust_vertex_locations[crust_triangles[crust_BVH[offset + dfs_stack[stack_index]].triangle_index].c], plate_transforms[index_bv_plate]);
                if (is_point_in_crust_tri_transformed(vl, t_a, t_b, t_c)) {
                    return candidate_triangle_index;
                }
            }
            // triangle test END
            while ((stack_index > 0) && (crust_BVH[offset + dfs_stack[stack_index - 1]].left_child != dfs_stack[stack_index]))
            {
                stack_index--;
            }
            if (stack_index == 0) {
                return -1;
            }
            dfs_stack[stack_index] = crust_BVH[offset + dfs_stack[stack_index - 1]].right_child;
        }

    }
    return -1;
}

[numthreads(64, 1, 1)]
void CSPlateVerticesSlabContributions(uint3 dID : SV_DispatchThreadID)
{
    int ivi = dID.x;
    if (ivi >= n_crust_vertices) {
        return;
    }
    int ivi_plate = crust_vertex_data[ivi].plate;
    float3 vl = quat_rot(crust_vertex_locations[ivi], plate_transforms[crust_vertex_data[ivi].plate]);
    for (int i = 0; i < n_plates; i++) {
        if (overlap_matrix[ivi_plate * n_plates + i] > -1) {
            continue;
        }

        if (crust_vertex_data[ivi].plate == i) {
            continue;
        }
        if (search_plate_bvh_for_point(ivi, i) != -1) {
            pull_contributions[ivi] = 1;
            break;
        }
    }
}


RWStructuredBuffer<int> continental_triangle_contacts_table; // array of triangle contact results
RWStructuredBuffer<int> continental_triangle_contacts; // array of triangle contact results
StructuredBuffer<float4> plate_transforms_predictive; // quaternion array of geometry rotations - prediction

int continental_triangle_contact_with_plate_bvh(int triangle_index, int triangle_plate_index, int bv_plate_index) {
    int candidate_triangle_index = -1;
    int dfs_stack[MAX_DFS_STACK_SIZE];
    int stack_index = 0;
    int candidate_index = 0;

    dfs_stack[stack_index] = 0;

    float3 needle_circumcenter = crust_triangles[triangle_index].circumcenter;
    float needle_circumradius = crust_triangles[triangle_index].circumradius;
    float3 needle_circumcenter_tr = quat_rot(needle_circumcenter, plate_transforms_predictive[triangle_plate_index]);
    int offset = crust_BVH_sps[bv_plate_index];

    s_triangle candidate, candidate_neighbour; // maybe delete

    float dot_prod, dist, barycenter_dot_product, barycenter_dot_max;

    bool nearest_barycenter_found, plate_check;

    while (stack_index >= 0) {
        dot_prod = dot(needle_circumcenter_tr, quat_rot(crust_BVH[offset + dfs_stack[stack_index]].circumcenter, plate_transforms_predictive[bv_plate_index]));

        dist = (dot_prod < 1 ? acos(dot_prod) : 0.0f);


        if (dist > (needle_circumradius + crust_BVH[offset + dfs_stack[stack_index]].circumradius) * 1.01f) {
            while ((stack_index > 0) && (crust_BVH[offset + dfs_stack[stack_index - 1]].left_child != dfs_stack[stack_index])) {
                stack_index--;
            }
            if (stack_index == 0) {
                return 0;
            }
            dfs_stack[stack_index] = crust_BVH[offset + dfs_stack[stack_index - 1]].right_child;
            continue;
        }

        if (crust_BVH[offset + dfs_stack[stack_index]].n_children == 2) {
            dfs_stack[stack_index + 1] = crust_BVH[offset + dfs_stack[stack_index]].left_child;
            stack_index++;
        }
        else {
            // triangle test START
            if (crust_BVH[offset + dfs_stack[stack_index]].triangle_index != -1) {
                if (crust_triangles_intersect(triangle_index, crust_BVH[offset + dfs_stack[stack_index]].triangle_index, triangle_plate_index, bv_plate_index)) {
                    candidate_index = crust_BVH[offset + dfs_stack[stack_index]].triangle_index;
                    if ((crust_vertex_data[crust_triangles[candidate_index].a].elevation >= 0) || (crust_vertex_data[crust_triangles[candidate_index].b].elevation >= 0) || (crust_vertex_data[crust_triangles[candidate_index].c].elevation >= 0)) {
                        return 1;
                    }

                }
            }
            // triangle test END
            while ((stack_index > 0) && (crust_BVH[offset + dfs_stack[stack_index - 1]].left_child != dfs_stack[stack_index]))
            {
                stack_index--;
            }
            if (stack_index == 0) {
                return 0;
            }
            dfs_stack[stack_index] = crust_BVH[offset + dfs_stack[stack_index - 1]].right_child;
        }
    }
    return 0;

}


[numthreads(64, 1, 1)]
void CSContinentalContacts(uint3 dID : SV_DispatchThreadID)
{
    int ivi = dID.x; // interpolated triangle index
    if (ivi >= n_crust_triangles) {
        return;
    }
    if ((crust_vertex_data[crust_triangles[ivi].a].plate != crust_vertex_data[crust_triangles[ivi].b].plate) || (crust_vertex_data[crust_triangles[ivi].b].plate != crust_vertex_data[crust_triangles[ivi].c].plate)) {
        return;
    }
    if ((crust_vertex_data[crust_triangles[ivi].a].elevation < 0) || (crust_vertex_data[crust_triangles[ivi].b].elevation < 0) || (crust_vertex_data[crust_triangles[ivi].c].elevation < 0)) {
        return;
    }

    int main_plate_index = crust_vertex_data[crust_triangles[ivi].a].plate;
    for (int i = 0; i < n_plates; i++) {
        if (i == main_plate_index) {
            continue;
        }
        if (overlap_matrix[i * n_plates + main_plate_index] < 1) { // only plates above can tear out terranes
            continue;
        }
        if (continental_triangle_contact_with_plate_bvh(ivi, main_plate_index, i) != 0) {
            continental_triangle_contacts_table[i * n_crust_triangles + ivi] = 1;
            continental_triangle_contacts[ivi] = 1;
        }
    }
}

int n_terranes;

float collision_coefficient;
float global_collision_distance;
float initial_average_vertex_area;

StructuredBuffer<int> terrane_colliding_plates;
StructuredBuffer<int> terrane_collided_plates;
StructuredBuffer<int> terrane_vertices;
StructuredBuffer<int> terrane_vertices_sps;


[numthreads(64, 1, 1)]
void CSContinentalCollisionUplift(uint3 dID : SV_DispatchThreadID)
{
  int ivi = dID.x;
  if (ivi >= n_crust_vertices) {
      return;
  }
  float uplift_sum = 0.0f;
  int ivi_plate = crust_vertex_data[ivi].plate;
  float3 iv = quat_rot(crust_vertex_locations[ivi], plate_transforms[ivi_plate]);

  float collision_max_distance, mindist, dist, dot_prod, terrane_area;
  int offset, terrane_size;

  for (int i = 0; i < n_terranes; i++) {
    if (ivi_plate != terrane_collided_plates[i]) {
      continue;
    }
    mindist = MAX_DISTANCE;
    offset = terrane_vertices_sps[i];
    terrane_size = terrane_vertices_sps[i+1] - terrane_vertices_sps[i];
    terrane_area = (float)terrane_size / (float)n_crust_vertices * 4.0f * 3.141592653f;
    collision_max_distance = global_collision_distance * sqrt(subduction_speed_transfer(iv, ivi_plate, terrane_colliding_plates[i])) * (float)terrane_size / initial_average_vertex_area;
    for (int j = 0; j < terrane_size; j++) {
      dot_prod = dot(iv, quat_rot(crust_vertex_locations[terrane_vertices[offset + j]], plate_transforms[terrane_colliding_plates[i]]));
      dist = (dot_prod <= 1 ? acos(dot_prod) : 0.0f);
      mindist = (dist < mindist ? dist : mindist);
    }
    if (mindist <= collision_max_distance) {
      uplift_sum += collision_coefficient * terrane_area * pow(1 - pow(mindist/collision_max_distance, 2) , 2);
    }
  }
  uplift[ivi] = uplift_sum;
}
